From 331ed4015a81b334d900219c5feba21ec3fac4d0 Mon Sep 17 00:00:00 2001
From: zeynep <zeynepguler1434@gmail.com>
Date: Tue, 8 Oct 2024 00:39:42 +0100
Subject: [PATCH] Task 2

---
 src/App.tsx   | 26 ++++++++++++++++++++------
 src/Graph.tsx | 46 +++++++++++++++++++++++++++++-----------------
 2 files changed, 49 insertions(+), 23 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..6d22f2a 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({
+          data: serverResponds,
+          showGraph: true
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..98084eb 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -31,26 +31,38 @@ class Graph extends Component<IProps, {}> {
   }
 
   componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+  // Get element to attach the table from the DOM.
+  const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
-    const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
+  elem.setAttribute('view', "y_line");
+  elem.setAttribute('column-pivots', '["stock"]');  // Fix typo here: 'colum-pivots' should be 'column-pivots'
+  elem.setAttribute('row-pivots', '["timestamp"]');
+  elem.setAttribute("columns", '["top_ask_price"]');
+  elem.setAttribute('aggregates',
+    JSON.stringify({
+      stock: "distinct count",
+      top_ask_price: "avg",
+      top_bid_price: "avg",
+      timestamp: "distinct count",
+    })
+  );
 
-    if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
-    }
-    if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
+  const schema = {
+    stock: 'string',
+    top_ask_price: 'float',
+    top_bid_price: 'float',
+    timestamp: 'date',
+  };
 
-      // Add more Perspective configurations here.
-      elem.load(this.table);
-    }
+  if (window.perspective && window.perspective.worker()) {
+    this.table = window.perspective.worker().table(schema);
   }
+  if (this.table) {
+    // Load the `table` in the `<perspective-viewer>` DOM reference.
+    elem.load(this.table);
+  }
+}
+
 
   componentDidUpdate() {
     // Everytime the data props is updated, insert the data into Perspective table
-- 
2.46.2.windows.1

